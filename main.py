# Python code @beducode
 

import base64, codecs
magic = ''
love = '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PNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtp3EipTWyqPujpz9zYPOvLJjfVT1urTWyqPjtqT90LJksoT9mMFxAPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBt0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOjLKAmQDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBt0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUOup3ZAPt0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtnJLtpzEwnTShM2HtnKZtIUW1MGbAPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOjpzyhqPulL2AioT9lVPftpzAzo250L29fo3VtXlOwnTShL2IlLJ5xVPftpzImVPftpUWiMzy0L29fo3VtXlOjqKEcnQVtXlOmqUVbpz9fMJWyqPxtXlOlMKZtXlNvVPVtXj0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTucnzS1ZvfvXlVep3ElXUWyqvumqUVbLJ1iqJ50XFxcVPftpzImVPftLzylqGZtXlNvVRWuoTShL2HvVPftpzImVPftVvN6VPVtXlOmqUVbpzI2XUA0pvuvLJjcXFxtXlOlMKZtXlObnJcuqGVtXlNvVSOlo2McqPVtXlOlMKZtXlNvVQbtVvNeVUA0pvulMKLbp3ElXUOlo2McqPxcXFNeVUWyplNeVTg1ozyhMlNeVPVtIT90LJjvVPftpzImVPftVvN6VPVtXlOmqUVbq2DcXD0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtMJkmMGbAPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOjpzyhqPulMKZtXlOjpz9znKEwo2kipvNeVUO1qTybZvNeVUA0pvulo2kyLzI0XFNeVUWyplNeVPVtVvNeVTucnzS1ZvfvXlVep3ElXN0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOlMKLbp3ElXTSgo3IhqPxcXFNeVUWyplNeVTWcpaHmVPftVvOPLJkuozAyVvNeVUWyplNeVPVtBvNvVPftp3ElXUWyqvumqUVbLzSfXFxcVPftpzImVPftnTydLKHlVPftVvODpz9znKDvVPftpzImVPftVvN6VPVtXlOmqUVbpzI2XUA0pvujpz9znKDcXFxtXlOlMKZtXlOeqJ5cozptXlNvVSEiqTSfVvNeVUWyplNeVPVtBvNvVPftp3ElXUqxXFxAPvNtVPNtVPNtVPNtVPNtVPNtVPNtMJkmMGbAPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTyzVUWxL2uuozqyVTymVSElqJH6QDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpUWcoaDbpzAwo2kipvNeVUWwMz9hqTAioT9lVPftL2uuozAypzShMPNeVUWyplNeVTkip2Iwo2kipvNeVUO1qTybZvNeVUA0pvulo2kyLzI0XFNeVUWyplNeVPVtVvNeQDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtnTydLKHlXlVeVvgmqUVbpzI2XUA0pvuuoJ91oaDcXFxtXlOlMKZtXlOvnKW1ZlNeVPVtDzSfLJ5wMFN6VPVtXlOlMKZtXlOmqUVbpzI2XUA0pvuvLJjcXFxtXlOlMKZtXlObnJcuqGVtXlNvVSOlo2'
god = ''
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))